#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from nomad.datamodel.metainfo.basesections import CompositeSystem
from nomad.datamodel.data import EntryData
import numpy as np
from structlog.stdlib import (
    BoundLogger,
)
from nomad.metainfo import (
    Package,
    Quantity,
    MEnum,
    Section,
)
from nomad.datamodel.data import (
    EntryData,
    ArchiveSection,
)

m_package = Package(name='ELN for Float Zone Feed Rods')


class Feed_rod(CompositeSystem, FzMaterial, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_display={
            "order": "List['name', 'lab_id', 'datetime', 'diameter', 'length', 'weight', 'rod_surface', 'rod_pretreatment', 'rod_angle', 'chemical_formula', 'status', 'angespitzt', 'geaetzt', 'ready_to_use', 'ort', 'description']"
        },)
    material_type = Quantity(
        type=MEnum(['Wacker', 'ASIMI', 'REC', 'other']),
        description='feed rod material options',
        a_eln={
            "component": "EnumEditQuantity"
        },
    )
    diameter = Quantity(
        type=np.float64,
        description='diameter of feed rod',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mm"
        },
        unit="mm",
    )
    length = Quantity(
        type=np.float64,
        description='length of feed rod',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mm"
        },
        unit="mm",
    )
    weight = Quantity(
        type=np.float64,
        description='weight of feed rod',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "kg"
        },
        unit="kg",
    )
    rod_surface = Quantity(
        type=MEnum(['round grinded', 'raw']),
        description='rod surface condition',
        a_eln={
            "component": "EnumEditQuantity"
        },
    )
    rod_pretreatment = Quantity(
        type=MEnum(['etched', 'raw', 'US cleaned']),
        description='rod pretreatment',
        a_eln={
            "component": "EnumEditQuantity"
        },
    )
    rod_angle = Quantity(
        type=np.float64,
        description='angle of feed rod',
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "deg"
        },
        unit="deg",
    )
    chemical_formula = Quantity(
        type=str,
        description='chemical formula of feed rod',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    status = Quantity(type=MEnum(['muss geätzt werden',
                                  'ready to use',
                                  'wurde zum Ätzen geschickt',
                                  'muss angespitzt werden']),
                      description='rod pretreatment',
                      a_eln={"component": "EnumEditQuantity"},
                      )
    angespitzt = Quantity(
        type=bool,
        description='tick if rod is sharpened',
        a_eln={
            "component": "BoolEditQuantity"
        },
    )
    geaetzt = Quantity(
        type=bool,
        description='tick if rod is etched',
        a_eln={
            "component": "BoolEditQuantity"
        },
    )
    ready_to_use = Quantity(
        type=bool,
        description='tick if rod is ready to use',
        a_eln={
            "component": "BoolEditQuantity"
        },
    )
    ort = Quantity(type=MEnum(['Wagen FZ-Halle',
                               'Keller',
                               'FZ Halle Regal',
                               'Kiste Keller',
                               'Kiste Glaspasage']),
                   description='location of feed rod',
                   a_eln={"component": "EnumEditQuantity"},
                   )

    def normalize(self, archive, logger: BoundLogger) -> None:
        '''
        The normalizer for the `Feed_rod` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super(Feed_rod, self).normalize(archive, logger)


m_package.__init_metainfo__()
